package observer;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;

/**
 * This class tracks listeners on the fields
 * of a child class.
 *
 * DO NOT EDIT THIS FILE!
 *
 * @author Josh Archer
 * @version 1.0
 */
public abstract class Observable
{
    //dispatches events to listeners
    protected PropertyChangeSupport propertyChanges = new PropertyChangeSupport(this);

    /**
     * Adds a listener to the fields of the child class
     * @param listener the listener
     */
    public void addChangeListener(PropertyChangeListener listener)
    {
        propertyChanges.addPropertyChangeListener(listener);
    }

    /**
     * Removes a listener from the fields of the child class.
     * @param listener the listener
     */
    public void removeChangeListener(PropertyChangeListener listener)
    {
        propertyChanges.removePropertyChangeListener(listener);
    }

    /**
     * Adds a listener to a specific field of the child class
     * @param property the property to target
     * @param listener the listener
     */
    public void addChangeListener(String property, PropertyChangeListener listener)
    {
        propertyChanges.addPropertyChangeListener(property, listener);
    }

    /**
     * Removes a listener from a specific field of the child class
     * @param property the property to target
     * @param listener the listener
     */
    public void removeChangeListener(String property, PropertyChangeListener listener)
    {
        propertyChanges.removePropertyChangeListener(property, listener);
    }

    @Override
    public String toString()
    {
        return "Number of listeners: " + propertyChanges.getPropertyChangeListeners().length;
    }
}
